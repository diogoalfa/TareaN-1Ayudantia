#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Comparación entre 
\end_layout

\begin_layout Title
Metodología Agiles y Tradicionales
\end_layout

\begin_layout Author
Diego Navia F - Francisco Ramirez - Sebastian Esparza G.
\end_layout

\begin_layout Date
17/10/2013
\end_layout

\begin_layout Chapter
Metodología Tradicional
\end_layout

\begin_layout Standard
Metodología Tradicional Al inicio el desarrollo de software era artesanal
 en su totalidad, la fuerte necesidad de mejorar el proceso y llevar los
 proyectos a la meta deseada, tuvieron que importarse la concepción y fundamento
s de metodologías existentes en otras áreas y adaptarlas al desarrollo de
 software.
 Esta nueva etapa de adaptación contenía el desarrollo dividido en etapas
 de manera secuencia que de algo mejoraba la necesidad latente en el campo
 del software.
 El desarrollo de los sistemas tradicionales de ciclo de vida se originó
 en la década de 1960 para desarrollar a gran escala funcional de sistemas
 de negocio en una época de grandes conglomerados empresariales.
 La idea principal era continuar el desarrollo de los sistemas de información
 en una muy deliberada, estructurada y metódica.
 Estas metodologías tradicionales que tienen una filosofía de tener la mayor
 énfasis posible en la planificación y control del proyecto, en especificación
 precisa de requisitos y modelado, imponen una disciplina de trabajo sobre
 el proceso de desarrollo del software, con el fin de conseguir un software
 más eficiente.
 Para ello, se hace énfasis en la planificación total de todo el trabajo
 a realizar y una vez que está todo detallado, comienza el ciclo de desarrollo
 del producto software.
 Se centran especialmente en el control del proceso, mediante una rigurosa
 definición de roles, actividades, artefactos, herramientas y notaciones
 para el modelado y documentación detallada.
 Además, las metodologías tradicionales no se adaptan adecuadamente a los
 cambios, por lo que no son métodos adecuados cuando se trabaja en un entorno,
 donde los requisitos no pueden predecirse o bien pueden variar.
 Entre las principales metodologías tradicionales tenemos los ya tan conocidos
 RUP y MSF entre otros, que centran su atención en llevar una documentación
 exhaustiva de todo el proyecto y centran su atención en cumplir con un
 plan de proyecto, definido todo esto, en la fase inicial del desarrollo
 del proyecto.
 Otra de las características importantes dentro de este enfoque tenemos
 los altos costos al implementar un cambio y al no ofrecer una buena solución
 para proyectos donde el entorno es volátil.
 Las metodologías tradicionales (formales) se focalizan en documentación,
 planificación y procesos.(Plantillas, técnicas de administración, revisiones,
 etc.), a continuación se describirá brevemente RUP uno de los métodos más
 usados dentro de los métodos tradicionales Rational Unified Process (RUP)
\end_layout

\begin_layout Standard
La metodología RUP, llamada así por sus siglas en inglés Rational Unified
 Process, divide en 4 fases el desarrollo del software: 
\end_layout

\begin_layout Standard
- Inicio, El Objetivo en esta etapa es determinar la visión del proyecto.
 - Elaboración, En esta etapa el objetivo es determinar la arquitectura
 óptima.
 - Construcción, En esta etapa el objetivo es llevar a obtener la capacidad
 operacional inicial.
 - Transmisión, El objetivo es llegar a obtener el release del proyecto.
 
\end_layout

\begin_layout Standard
Vale mencionar que el ciclo de vida que se desarrolla por cada iteración,
 es llevada bajo dos disciplinas: 
\end_layout

\begin_layout Standard
Disciplina de Desarrollo.
\end_layout

\begin_layout Standard
- Ingeniería de Negocios, Requerimientos, Análisis y Diseño, Implementación,
 Pruebas
\end_layout

\begin_layout Standard
Disciplina de Soporte.
\end_layout

\begin_layout Standard
- Configuración y administración del cambio, Administrando el proyecto,
 Ambiente, Distribución
\end_layout

\begin_layout Standard
Una particularidad de esta metodología es que, en cada ciclo de iteración,
 se hace exigente el uso de artefactos (Un artefacto puede ser un documento,
 un modelo, o un elemento de modelo), siendo por este motivo, una de las
 metodologías más importantes para alcanzar un grado de certificación en
 el desarrollo del software.
 La Metodología RUP es más adaptable para proyectos de largo plazo.
\end_layout

\begin_layout Standard
Comentarios (opinión) Por otro lado, en lo que se refiere a la metodología
 esta comprende tres principios claves: Dirigido por los casos de uso, centrado
 en la arquitectura, iterativo e incremental.
 En lo referente a dirigido por los casos de uso, significa que los requerimient
os están enfocado a dar valor al cliente y que el proceso debe garantizar
 que todo el desarrollo, pruebas, planeación, documentación etc, está orientado
 a cubrir estas expectativas del cliente y asegurar que los requerimientos
 de valor se ponen en producción.
 En lo referente a centrado en arquitectura, significa que hay un énfasis
 a diseñar una arquitectura de calidad, y es la arquitectura también la
 que guía la forma cómo se debe planear y hacer el desarrollo.
 En lo referente a iterativo e incremental, significa que el proyecto se
 divide en varios ciclos de vida (llamadas iteraciones) que deben dar como
 resultado un ejecutable.
 Por cada una de las iteraciones se va agregando requerimientos y sobre
 todo valor al cliente; por este motivo es incremental.
 
\end_layout

\begin_layout Chapter
Metodología Agil 
\end_layout

\begin_layout Section
Definicion 
\end_layout

\begin_layout Standard
Scrum: 
\end_layout

\begin_layout Standard
Metodología Ágil que aplica un conjuntos de buenas prácticas para trabajar
 colaborativamente en equipo, para llevar a cabo un proyecto de software.
 En esta metodología se va realizando entregas parciales y regulares del
 producto final.Teniendo en cuenta la jerarquía de importancia al cliente.Orientad
o a ambientes donde se necesite resultados muy próximos y los requerimientos
 sean cambiantes o no definidos.Donde la innovación, la competitividad, la
 flexibilidad y la productividad son fundamentales.
 También se utiliza para resolver situaciones en que no se está entregando
 al cliente lo que necesita, cuando las entregas se alargan demasiado, los
 costes se disparan o la calidad no es aceptable, cuando se necesita capacidad
 de reacción ante la competencia, cuando la moral de los equipos es baja
 y la rotación alta, cuando es necesario identificar y solucionar incidencias
 sistemáticamente o cuando se quiere trabajar utilizando un proceso especializad
o en el desarrollo de producto
\end_layout

\begin_layout Standard
Proceso Scrum:
\end_layout

\begin_layout Standard
Esta metodología se implementa en bloques temporales ,cortos y fijos .En
 iteraciones de más menos 2 semana hasta un mes si es necesario.Cada iteración
 se tiene resultado completo,un avance consistente del producto final.
\end_layout

\begin_layout Section
Actividades 
\end_layout

\begin_layout Standard
Actividades en Scrum :
\end_layout

\begin_layout Standard
-Planificación de la iteración (Sprint Planning)
\end_layout

\begin_layout Standard
-Ejecución de la iteración (Sprint) 
\end_layout

\begin_layout Standard
-Reunión diaria de sincronización del equipo (Scrum Daily Meeting)
\end_layout

\begin_layout Standard
-Demostración de los requisitos completados (Sprint Review) 
\end_layout

\begin_layout Standard
-Retrospectiva (Sprint Retrospective) 
\end_layout

\begin_layout Standard
-Re-planificación del proyecto 
\end_layout

\begin_layout Chapter
Cuadro Comparativo
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/Diogo/Desktop/Captura de pantalla 2013-10-16 a la(s) 20.09.17.png
	scale 60
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Cuadro Comparativo entre Metodología Agil y Tradicional 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Conclusión 
\end_layout

\begin_layout Chapter
Bibliografía 
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.proyectosagiles.org/como-funciona-scrum
\end_layout

\end_inset


\end_layout

\end_body
\end_document
